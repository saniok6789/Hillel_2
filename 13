class AutoMethodMeta(type):
    def __new__(cls, name, bases, dct):
        new_dct = {}
        for key, value in dct.items():
            if not key.startswith('__') and not callable(value):
                private_name = '_' + key
                new_dct[private_name] = value
                
                def getter(self, private_name=private_name):
                    return getattr(self, private_name)

                def setter(self, value, private_name=private_name):
                    setattr(self, private_name, value)
                
                new_dct['get_' + key] = getter
                new_dct['set_' + key] = setter
        return type.__new__(cls, name, bases, new_dct)

class Person(metaclass=AutoMethodMeta):
    name = "John"
    age = 30

p = Person()
print(p.get_name())  
p.set_age(31)
print(p.get_age())  
